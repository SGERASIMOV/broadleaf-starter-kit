application:
  configuration:
    input.db-name: broadleaf
    input.lb-bucket: http://roundrobin:80
    input.app-fork: loky9000
    input.app-branch: solr-cloud # solr-green
    input.app-quantity: "1"
    input.app-image: "us-east-1/ami-1ba18d72"
    input.app-identity: "ec2-user"
    input.instance-size: "m1.small"
    input.solr-collections: ["https://raw.githubusercontent.com/loky9000/DemoSite/solr-cloud/core/src/main/resources/cores/cores.tar.gz"]
    input.solr-version: "4.4.0"
    input.solr-quantity: "4"
    input.zookeeper-quantity: "3"

     
    
  bindings:
    - [main.workflow, db]
    - [main.workflow, solr]
    - [main.workflow, app]
    - [main.workflow, lb]

  interfaces:
    input:
      db-name: "bind(main.workflow#input.db-name)"
      app-fork: "bind(main.workflow#input.app-fork)"
      app-branch: "bind(main.workflow#input.app-branch)"
      lb-bucket: "bind(main.workflow#input.lb-bucket)"
      app-quantity: "bind(app#input.quantity)"
      app-image: "bind(app#input.image, main.workflow#input.image)"
      app-identity: "bind(app#input.identity, main.workflow#input.identity)"
      instance-size: "bind(app#input.instance-size, main.workflow#input.instance-size)"
      solr-collections: "bind(solr#input.solr-collections)"
      solr-version: "bind(solr#input.solr-version)" 
      solr-quantity: "bind(solr#input.solr-quantity)"
      zookeeper-quantity: "bind(solr#input.zookeeper-quantity)"
    endpoints:
      lb: "bind(lb#output.lb-stats)"
      app: "bind(app#output.app-hosts)"
      db: "bind(db#output.dbms)"
      demosite: "bind(main.workflow#result.entry-url)"
      admin_url: "bind(main.workflow#result.entry-admin-url)"
      solr-url: "bind(solr#endpoints.solr-url)"
      zoo-ui: "bind(solr#nodes.zoo-ui)"
      

  components:
    main:      
      components:        
        workflow:
          type: workflow.Instance
          interfaces:
            input:
              image: configuration(string)
              identity: configuration(string)
              instance-size: configuration(string)
              db-name: configuration(string)
              scm-provider: configuration(string)
              app-fork: configuration(string)
              app-branch: configuration(string)
              lb-bucket: configuration(string)
              db-user: configuration(string)
              db-password: configuration(string)              
              privileges: configuration(list<string>)
              db-sql-url: configuration(list<string>)
              lib-uri: configuration(list<string>)
              create-context: configuration(bool)
              lbstats-stats-user: configuration(string)
              lbstats-stats-pass: configuration(string)
              lbstats-stats-port: configuration(string)
              lbstats-stats-url: configuration(string)
              solr-collections: configuration(list<string>)
              solr-version: configuration(string)
              solr-quantity: configuration(string)
              zookeeper-quantity: configuration(string)
            db-info:
              dbms: consume-signal(object)
              db-host: consume-signal(string)
              db-port: consume-signal(int)
            solr-info:
              solr-url: consume-signal(list<string>)
            zoo-hosts:
              solr-zoo-nodes: consume-signal(string)
              zoo-ui: consume-signal(list<string>)
            db-manage:
              schema: send-command(string db-user, string db-user-password, list<string> db-user-privileges => object connection)
              db: send-command(string db-name, string db-action)
              user: send-command(list<string> app-hosts, string db-name, string db-user, string db-user-password, list<string> db-user-privileges, string user-action)
              file-query: send-command(object connection, list<string> sql-url)
            app-manage:
              build-app: send-command(string scm-provider, string git-uri, string app-branch => list<string> wars )
              deploy-libs: send-command(list<string> lib-uri)
              deploy-war: send-command(string uri, string path, object context-attrs, object context-nodes)
              reconfigure: send-command(string java-opts)
              manage-service: send-command(string service-action)
            app-output:
              app-hosts: consume-signal(list<string>)
              app-port: consume-signal(string)
            lb-manage:
              add-servers: send-command(list<string> app-hosts, string app-port, string lb-bucket => string entry-url)
              reconfigure-servers: send-command(list<string> app-hosts, string app-port, string lb-bucket)
            lb-output:
              lb-stats: consume-signal(object)
            result:
              entry-url: publish-signal(string)
              entry-admin-url: publish-signal(string)

          required: [db-manage, app-manage, lb-manage, zoo-hosts, db-info, app-output]
          configuration: 
            input.db-user: broadleaf
            input.db-password: broadleaf #const
            input.privileges: ["all"] #const
            input.db-sql-url: ["https://raw.githubusercontent.com/loky9000/DemoSite/solr-cloud/core/src/main/resources/sql/schema.sql", "https://raw.githubusercontent.com/loky9000/DemoSite/solr-cloud/core/src/main/resources/sql/load_full.sql"]
            input.scm-provider: git #const
            input.lib-uri: ["http://repo1.maven.org/maven2/org/apache/tomcat/dbcp/6.0.26/dbcp-6.0.26.jar", "http://repo1.maven.org/maven2/mysql/mysql-connector-java/5.1.6/mysql-connector-java-5.1.6.jar"]
            input.create-context: false
            input.lbstats-stats-user: admin
            input.lbstats-stats-pass: pa55w0rd
            input.lbstats-stats-port: "1926"
            input.lbstats-stats-url: "/admin?stats"
            input.solr-collections: ["https://raw.githubusercontent.com/loky9000/DemoSite/solr-cloud/core/src/main/resources/cores/cores.tar.gz" ]
            input.solr-version: "4.4.0"
            input.solr-quantity: "3"
            input.zookeeper-quantity: "4"

            configuration.triggers:
              app-output.app-hosts: app-scale
              input.app-fork: rebuild-app
              input.app-branch: rebuild-app


            configuration.propagateStatus: [ app-scale, rebuild-app ]

            configuration.workflows:
              launch:
                parameters:
                  - image: &image
                      description: OS image
                  - identity: &identity
                      description: OS identity
                  - instance-size: &instance-size
                      description: Instance size
                  - db-name: &db-name
                      description: primary db name
                  - db-user: &db-user
                      description: user for new database
                  - db-password: &db-password
                      description: user password for new database
                  - privileges: &privileges
                      description: user privileges for new database
                  - db-sql-url: &db-sql-url
                      description: sql url
                  - scm-provider: &scm-provider
                      description: "Source provider (Git or SVN)"
                  - app-fork: &app-fork
                      description: git fork
                  - app-branch: &app-branch
                      description: git branch    
                  - lib-uri: &lib-uri
                      description: URI to additional app libs
                  - create-context: &create-context
                      description: Create or not context file
                  - lbstats-stats-user: &lbstats-stats-user
                      description: lb statistic user
                  - lbstats-stats-pass: &lbstats-stats-pass
                      description: lb statistic user's password 
                  - lbstats-stats-port: &lbstats-stats-port
                      description: lb statistic port
                  - lbstats-stats-url: &lbstats-stats-url
                      description: lb statistic's url_
                steps:
                  - get-env-props:
                      action: getEnvironmentProperties
                      phase: get-env-props
                      output:
                        props: result
                  - provision-node:
                       action: provisionVms
                       phase: provisionAgent
                       precedingPhases: [ get-env-props ]
                       parameters:
                         roleName: tomcat-node
                         hardwareId: ""
                         vmIdentity: "{$.identity}"
                         retryCount: 1
                         staticIps: "{$.props.app-output.app-hosts}"
                  - create-db:
                      action: serviceCall
                      phase: create-db
                      precedingPhases: [ get-env-props ]
                      parameters:
                        timeout: 600
                        service: db-manage
                        command: db
                        arguments:
                          db-name: "{$.db-name}"
                          db-action: "create"
                  - create-db-user:
                      action: serviceCall
                      phase: create-db-user
                      precedingPhases: [ create-db ]
                      parameters:
                        timeout: 600
                        service: db-manage
                        command: user
                        arguments:
                          app-hosts: "{$.props.app-output.app-hosts}"
                          db-name: "{$.db-name}"
                          db-user: "{$.db-user}"
                          db-user-password: "{$.db-password}"
                          db-user-privileges: "{$.privileges}"
                          user-action: "grant"
                  - run-sql:
                      action: serviceCall
                      precedingPhases: [ create-db-user ]
                      phase: run-sql
                      parameters:
                        timeout: 300
                        service: db-manage
                        command: file-query
                        arguments:
                          sql-url: "{$.db-sql-url}"
                          connection:
                             db-name: "{$.db-name}"
                             db-user: "{$.db-user}"
                             db-user-password: "{$.db-password}"                        
                  - build-app:   
                      action: serviceCall
                      phase: build-app
                      precedingPhases: [ get-env-props ]
                      parameters:
                        timeout: 600
                        service: app-manage
                        command: build-app
                        arguments:
                          scm-provider: "{$.scm-provider}"
                          git-uri: "git://github.com/{$.app-fork}/DemoSite.git"
                          app-branch: "{$.app-branch}"
                      output:
                        warlist: result
                  - add-solr-support:
                      action: "chefrun"
                      phase: add-solr-support
                      precedingPhases: [ build-app ]
                      parameters:
                          isSolo: true
                          roles: [ tomcat-node ]
                          runList: [ "recipe[cookbook-qubell-broadleaf::add-solr-support]" ]
                          recipeUrl: "https://s3.amazonaws.com/qubell-starter-kit-artifacts/qubell-bazaar/broadleaf-starter-kit-cookbooks-stable-f92dea1.tar.gz"
                          jattrs:
                            cookbook-qubell-broadleaf:
                              solr_url: "{$.props.zoo-hosts.solr-zoo-nodes}"
                              solr_reindex_url: "{$.props.zoo-hosts.solr-zoo-nodes}"
                  - deploy-libs:
                      action: serviceCall
                      phase: deploy-libs
                      precedingPhases: [ build-app ]
                      parameters:
                        timeout: 600
                        service: app-manage
                        command: deploy-libs
                        arguments:
                          lib-uri: "{$.lib-uri}"
                  - reconfigure-tomcat:
                      action: serviceCall
                      phase: reconfigure-tomcat
                      precedingPhases: [ deploy-libs ]
                      parameters:
                        timeout: 600
                        service: app-manage
                        command: reconfigure
                        arguments:
                          java-opts: "-Djava.awt.headless=true -Xmx700m -XX:+UseConcMarkSweepGC -Ddatabase.driver=com.mysql.jdbc.Driver -Ddatabase.url=jdbc:mysql://{$.props.db-info.db-host}:{$.props.db-info.db-port}/{$.db-name}?autoReconnect=true -Ddatabase.user={$.db-user} -Ddatabase.password={$.db-password}"
                  - deploy-war:
                      action: serviceCall
                      phase: deploy-war
                      precedingPhases: [ build-app, add-solr-support, reconfigure-tomcat ]
                      parameters:
                        timeout: 600
                        service: app-manage
                        command: deploy-war
                        arguments:
                          uri: "{$.warlist.wars[1]}"
                          path: "/"
                          context-attrs: {}
                          context-nodes: []                            
                  - deploy-admin-war:
                      action: serviceCall
                      phase: deploy-admin-war
                      precedingPhases: [ deploy-war ]
                      parameters:
                        timeout: 600
                        service: app-manage
                        command: deploy-war
                        arguments: 
                           uri: "{$.warlist.wars[0]}"
                           path: "/admin"
                           context-attrs: {}
                           context-nodes: []                  
                  - lb-add-server:
                      action: serviceCall
                      precedingPhases: [ deploy-war, deploy-admin-war ]
                      phase: lb-add-server
                      parameters:
                        timeout: 600
                        service: lb-manage
                        command: add-servers
                        arguments:
                          app-hosts: "{$.props.app-output.app-hosts}"
                          app-port: "{$.props.app-output.app-port}"
                          lb-bucket: "http://roundrobin:80/"
                      output:
                        result-lb: result
                          #todo move lb-bucket to launch param 
                  - await200seconds:
                      action: wait
                      description: Sample step that waits for 6 minute.
                      phase: sync
                      precedingPhases: [lb-add-server]
                      parameters:
                        delay: 200   
                return:
                  entry-url:
                    value: "{$.result-lb.entry-url}"
                  entry-admin-url:
                    value: "{$.result-lb.entry-url}/admin"
              
              app-scale:
                steps:
                  - get-env-props:
                      action: getEnvironmentProperties
                      phase: get-env-props
                      output:
                        props: result
                  - cleanup:
                      action: provisionVms
                      phase: cleanupTomcatNodes
                      precedingPhases: [ get-env-props ]
                      parameters:
                        roleName: tomcat-node
                        hardwareId: ""
                        vmIdentity: "{$.identity}"
                        retryCount: 1
                        targetQuantity: 0
                  - provision-node:
                       action: provisionVms
                       phase: provisionAgent
                       precedingPhases: [ cleanupTomcatNodes ]
                       parameters:
                         roleName: tomcat-node
                         hardwareId: ""
                         vmIdentity: "{$.identity}"
                         retryCount: 1
                         staticIps: "{$.props.app-output.app-hosts}"
                  - grant-db-user:
                      action: serviceCall
                      phase: create-db-user
                      precedingPhases: [ get-env-props ]
                      parameters:
                        timeout: 600
                        service: db-manage
                        command: user
                        arguments:
                          app-hosts: "{$.props.app-output.app-hosts}"
                          db-name: "{$.db-name}"
                          db-user: "{$.db-user}"
                          db-user-password: "{$.db-password}"
                          db-user-privileges: "{$.privileges}"
                          user-action: "grant"
                  - build-app:
                      action: serviceCall
                      phase: build-app
                      precedingPhases: [ get-env-props ]
                      parameters:
                        timeout: 800
                        service: app-manage
                        command: build-app
                        arguments:
                          scm-provider: "{$.scm-provider}"
                          git-uri: "git://github.com/{$.app-fork}/DemoSite.git"
                          app-branch: "{$.app-branch}"
                      output:
                        warlist: result
                  - add-solr-support:
                      action: "chefrun"
                      phase: add-solr-support
                      precedingPhases: [ build-app ]
                      parameters:
                          isSolo: true
                          roles: [ tomcat-node ]
                          runList: [ "recipe[cookbook-qubell-broadleaf::add-solr-support]" ]
                          recipeUrl: "https://s3.amazonaws.com/qubell-starter-kit-artifacts/qubell-bazaar/broadleaf-starter-kit-cookbooks-stable-f92dea1.tar.gz"
                          jattrs:
                            cookbook-qubell-broadleaf:
                              solr_url: "{$.props.zoo-hosts.solr-zoo-nodes}"
                              solr_reindex_url: "{$.props.zoo-hosts.solr-zoo-nodes}"
                  - deploy-libs:
                      action: serviceCall
                      phase: deploy-libs
                      precedingPhases: [ build-app ]
                      parameters:
                        timeout: 800
                        service: app-manage
                        command: deploy-libs
                        arguments:
                          lib-uri: "{$.lib-uri}"
                  - reconfigure-tomcat:
                      action: serviceCall
                      phase: reconfigure-tomcat
                      precedingPhases: [ deploy-libs, add-solr-support ]
                      parameters:
                        timeout: 800
                        service: app-manage
                        command: reconfigure
                        arguments:
                          java-opts: "-Djava.awt.headless=true -Xmx700m -XX:+UseConcMarkSweepGC -Ddatabase.driver=com.mysql.jdbc.Driver -Ddatabase.url=jdbc:mysql://{$.props.db-info.db-host}:{$.props.db-info.db-port}/{$.db-name}?autoReconnect=true -Ddatabase.user={$.db-user} -Ddatabase.password={$.db-password}"        
                  - deploy-war:
                      action: serviceCall
                      phase: deploy-war
                      precedingPhases: [ build-app, add-solr-support, reconfigure-tomcat ]
                      parameters:
                        timeout: 600
                        service: app-manage
                        command: deploy-war
                        arguments:
                          uri: "{$.warlist.wars[1]}"
                          path: "/"
                          context-attrs: {}
                          context-nodes: [] 
                  - deploy-admin-war:
                      action: serviceCall
                      phase: deploy-admin-war
                      precedingPhases: [ deploy-war ]
                      parameters:
                        timeout: 800
                        service: app-manage
                        command: deploy-war
                        arguments:
                           uri: "{$.warlist.wars[0]}"
                           path: "/admin"
                           context-attrs: {}
                           context-nodes: [] 
                  - lb-reconfigure-servers:
                      action: serviceCall
                      precedingPhases: [ deploy-admin-war ]
                      phase: lb-reconfigure-servers
                      parameters:
                        timeout: 800
                        service: lb-manage
                        command: reconfigure-servers
                        arguments:
                          app-hosts: "{$.props.app-output.app-hosts}"
                          app-port: "{$.props.app-output.app-port}"
                          lb-bucket: "http://roundrobin:80/"
                  - await200seconds:
                      action: wait
                      description: Sample step that waits for 6 minute.
                      phase: sync
                      precedingPhases: [lb-reconfigure-servers]
                      parameters:
                        delay: 200   
              rebuild-app:
                steps:
                  - get-env-props:
                      action: getEnvironmentProperties
                      phase: get-env-props
                      output:
                        props: result
                  - provision-node:
                       action: provisionVms
                       phase: provisionAgent
                       precedingPhases: [ get-env-props ]
                       parameters:
                         roleName: tomcat-node
                         hardwareId: ""
                         vmIdentity: "{$.identity}"
                         retryCount: 1
                         staticIps: "{$.props.app-output.app-hosts}"      
                  - build-app:
                      action: serviceCall
                      phase: build-app
                      precedingPhases: [ get-env-props ]
                      parameters:
                        timeout: 800
                        service: app-manage
                        command: build-app
                        arguments:
                          scm-provider: "{$.scm-provider}"
                          git-uri: "git://github.com/{$.app-fork}/DemoSite.git"
                          app-branch: "{$.app-branch}"
                      output:
                        warlist: result
                  - add-solr-support:
                      action: "chefrun"
                      phase: add-solr-support
                      precedingPhases: [ build-app ]
                      parameters:
                          isSolo: true
                          roles: [ tomcat-node ]
                          runList: [ "recipe[cookbook-qubell-broadleaf::add-solr-support]" ]
                          recipeUrl: "https://s3.amazonaws.com/qubell-starter-kit-artifacts/qubell-bazaar/broadleaf-starter-kit-cookbooks-stable-f92dea1.tar.gz" 
                          jattrs:
                            cookbook-qubell-broadleaf:
                              solr_url: "{$.props.zoo-hosts.solr-zoo-nodes}"
                              solr_reindex_url: "{$.props.zoo-hosts.solr-zoo-nodes}"
                  - reconfigure-tomcat:
                      action: serviceCall
                      phase: reconfigure-tomcat
                      precedingPhases: [ add-solr-support ]
                      parameters:
                        timeout: 800
                        service: app-manage
                        command: reconfigure
                        arguments:
                          java-opts:  "-Djava.awt.headless=true -Xmx700m -XX:+UseConcMarkSweepGC -Ddatabase.driver=com.mysql.jdbc.Driver -Ddatabase.url=jdbc:mysql://{$.props.db-info.db-host}:{$.props.db-info.db-port}/{$.db-name}?autoReconnect=true -Ddatabase.user={$.db-user} -Ddatabase.password={$.db-password}"       
                  - deploy-war:
                      action: serviceCall
                      phase: deploy-war
                      precedingPhases: [ build-app, add-solr-support, reconfigure-tomcat ]
                      parameters:
                        timeout: 600
                        service: app-manage
                        command: deploy-war
                        arguments:
                          uri: "{$.warlist.wars[1]}"
                          path: "/"
                          context-attrs: {}
                          context-nodes: [] 
                  - deploy-admin-war:
                      action: serviceCall
                      phase: deploy-admin-war
                      precedingPhases: [ deploy-war ]
                      parameters:
                        timeout: 800
                        service: app-manage
                        command: deploy-war
                        arguments: 
                           uri: "{$.warlist.wars[0]}"
                           path: "/admin"
                           context-attrs: {}
                           context-nodes: [] 
                  - await200seconds:
                      action: wait
                      description: Sample step that waits for 6 minute.
                      phase: sync
                      precedingPhases: [deploy-admin-war]
                      parameters:
                        delay: 200   
              destroy:
                steps: []

    db:
      type: reference.Submodule
      configuration:
        __locator.application-id: "Database"
      interfaces:
        input:
          db-port: configuration(int)
          db-root-password: configuration(string)
          image: configuration(string)
          image-user: configuration(string)
          instance-size: configuration(string)
          recipe-url: configuration(string)
        manage:
          schema: receive-command(string db-user, string db-user-password, list<string> db-user-privileges => object connection)
          db: receive-command(string db-name, string db-action)
          user: receive-command(list<string> app-hosts, string db-name, string db-user, string db-user-password, list<string> db-user-privileges, string user-action)
          file-query: receive-command(object connection, list<string> sql-url)
        output:
          dbms: publish-signal(object)
          db-port: publish-signal(int)
          db-host: publish-signal(string)
          
    app:
      type: reference.Submodule
      configuration:
        __locator.application-id: "Application Server"
      interfaces:
        input:
          image: configuration(string)
          identity: configuration(string)
          instance-size: configuration(string)
          quantity: configuration(string)
        management:
          build-app: receive-command(string scm-provider, string git-uri, string app-branch => list<string> wars)
          deploy-libs: receive-command(list<string> lib-uri)
          deploy-war: receive-command(string uri, string path, object context-attrs, object context-nodes)
          reconfigure: receive-command(string java-opts)
          manage-service: receive-command(string service-action)
        output:
          app-hosts: publish-signal(list<string>)
          app-port: publish-signal(string)

    lb:
      type: reference.Submodule
      configuration:
        __locator.application-id: "Load Balancer"
      interfaces:
        input:
          stats-user: configuration(string)
          stats-pass: configuration(string)
          stats-port: configuration(string)
          stats-url: configuration(string)
        lb-manage:
          add-servers: receive-command(list<string> app-hosts, string app-port, string lb-bucket => string entry-url)
          reconfigure-servers: receive-command(list<string> app-hosts, string app-port, string lb-bucket)
        output:
          lb-stats: publish-signal(object)
          
    solr:
        type: reference.Submodule
        configuration:
          __locator.application-id: "Solr Cloud"
        interfaces:   
           input:
              solr-version: configuration(string)
              solr-quantity: configuration(string)
              zookeeper-quantity: configuration(string)
              solr-collections: configuration(list<string>)
           nodes:
              solr-zoo-nodes: publish-signal(string)
              zoo-ui: publish-signal(list<string>)
           endpoints:
              solr-url: publish-signal(list<string>)
   
