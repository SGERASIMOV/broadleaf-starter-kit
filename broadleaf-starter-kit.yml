# Broadleaf Starter Kit
application:
# Input Configuration parameters.
# In this section you can set input configuration parameters which you
# will be able to change later in reconfiguration
  configuration:
    input.db-name: broadleaf # Name for db created in your "Database" component
    input.lb-bucket: http://roundrobin:80 # Name for bucket created in your "Load Balancer" component
    input.app-fork: qubell-bazaar # Broadleaf DemoSite Fork name
    input.app-branch: solr-cloud # solr-green (Branch name in your fork)
    input.app-quantity: 1 # Numbers of hosts with application for "Application Server" Component
    input.operating-system: {image: "us-east-1/ami-1ba18d72", identity: ec2-user} # image/identity pair for describing Operating system.
    input.instance-size: "m1.small" # EC2 Instance type 
    input.solr-collections: ["https://raw.github.com/qubell-bazaar/DemoSite/solr-cloud/core/src/main/resources/cores/cores.tar.gz"] # Archive with cores for "Solr Cloud" component
    input.solr-version: "4.4.0" # Solr Version
    input.recipe-url: "https://s3.amazonaws.com/qubell-starter-kit-artifacts/qubell-bazaar/broadleaf-starter-kit-cookbooks-stable-8a97f35.tar.gz" # Chef Cookbooks Url

# Binding section.
# Here we bind main.workflow component on submodules.
# This is a component binding section it mean interfaces in components [main.workflow, app]
# will be connected by pin names regardless of interface name

  bindings:
    - [main.workflow, db]
    - [main.workflow, solr]
    - [main.workflow, app]
    - [main.workflow, lb]

# Application Interfaces binding section.
# Here we describe a interfaces with pins and their bindings on component's interfaces.
# For binding using function bind(Component1#interface.pin, Component2#interface.pin)
  interfaces:
    input: # Contain pins with type: configuration()
      db-name: "bind(main.workflow#input.db-name)" # For example value input.db-name mapped on input.db-name in component main.workflow
      app-fork: "bind(main.workflow#input.app-fork)"
      app-branch: "bind(main.workflow#input.app-branch)"
      lb-bucket: "bind(main.workflow#input.lb-bucket)"
      app-quantity: "bind(app#input.quantity)"
      operating-system: "bind(main.workflow#input.operating-system, app#input.operating-system)"
      instance-size: "bind(app#input.instance-size)"
      solr-collections: "bind(solr#input.solr-collections)"
      solr-version: "bind(solr#input.solr-version)"
      recipe-url: "bind(main.workflow#input.recipe-url)"
    endpoints:  # That values we want to see on main application dashboard
      lb: "bind(lb#haproxy.lb-stats)"
      app: "bind(app#tomcat.app-hosts)"
      db: "bind(db#mysql.dbms)"
      demosite: "bind(main.workflow#result.entry-url)"
      admin-url: "bind(main.workflow#result.entry-admin-url)"
      solr-url: "bind(solr#solr-zoo.solr-url)"
      zoo-ui: "bind(solr#solr-zoo.zoo-ui)"

## Components definitions ##

  components:
    main:  # We have a root component called "main"
      components:
        workflow: # Component main contain component main.workflow
          type: workflow.Instance #It's a component type to run imperative workflow
          interfaces: # Each component have interfaces wit pins
            input: # Contain pins with type: configuration().This type using for configuration parameters
              operating-system:
                 type: configuration(map<string,object>) # It's a pin with configuration type and value will be a map string on left side object on right side
                 suggestions:
                     "centos": {image: "us-east-1/ami-bf5021d6", identity: root} # Here string "centos" mapped on object {image: "us-east-1/ami-bf5021d6", identity: root} etc.
                     "amazon": {image: "us-east-1/ami-1ba18d72", identity: ec2-user}
                     "ubuntu1204": {image: "us-east-1/ami-967edcff", identity: ubuntu}
                     "ubuntu1004": {image: "us-east-1/ami-9f3906f6", identity: ubuntu}
              db-name:
                 type: configuration(string) # It's a pin with configuration type and value will be a string
                 name: Mysql database name 
              scm-provider:
                 type: configuration(string)
                 name: SCM provider(Git,SVN etc)
              app-fork:
                 type: configuration(string)
                 name: Github repo fork
              app-branch:
                 type: configuration(string)
                 name: Github repo branch
              lb-bucket:
                 type: configuration(string)
                 name: Haproxy LB frontend  type and port
              db-user:
                 type: configuration(string)
                 name: Database user
              db-password:
                 type: configuration(string)
                 name: Database password
              privileges:
                 type: configuration(list<string>)
                 name: User privileges
              db-sql-url:
                 type: configuration(list<string>)
                 name: Url to sql for db schema and content
              lib-uri:
                 type: configuration(list<string>)
                 name: Lib Url
              recipe-url:
                 type: configuration(string)
                 name: Chef Cookbooks Url
            mysql: # Signals which we send/receive to Database submodule
              dbms:
                 type: consume-signal(object)  # This type mean we receive signal which value will be a object on that pin
                 name: Database parameters
              db-host:
                 name: Database host 
                 type: consume-signal(string)
              db-port:
                 type: consume-signal(int)
                 name: Database port
              schema:  # send-command type used for ServiceCall actions in steps below. It contain list of parameters and their types
                 type: send-command(string db-user, string db-user-password, list<string> db-user-privileges => object connection) # 
              db:
                 type: send-command(string db-name, string db-action)
                 name: Database create/drop
              user:
                 type: send-command(list<string> app-hosts, string db-name, string db-user, string db-user-password, list<string> db-user-privileges, string user-action)
                 name: DB user management
              file-query:
                 type: send-command(object connection, list<string> sql-url)
                 name: Run sql query
            solr-zoo: # Signals which we send/receive to Solr submodule
              solr-url:
                 type: consume-signal(list<string>)
                 name: Solr urls list
              solr-zoo-nodes:
                 type: consume-signal(string)
                 name: Zookeeper hosts
              zoo-ui:
                 type: consume-signal(list<string>)
                 name: Zookeeper UI url
            tomcat: # Signals which we send/receive to Application Server submodule
              build-app:
                 type: send-command(string scm-provider, string git-uri, string app-branch => list<string> wars )
                 name: Maven Build Tomcat action
              deploy-libs:
                 type: send-command(list<string> lib-uri)
                 name: Libs deployment Tomcat  action 
              deploy-war:
                 type: send-command(string uri, string path, object context-attrs, object context-nodes)
                 name: Deploy war/jar action
              reconfigure:
                 type: send-command(string java-opts)
                 name: restart Tomcat with new JAVA_OPTS
              manage-service:
                 type: send-command(string service-action)
                 name: Manage Service Tomcat action
              app-hosts:
                 type: consume-signal(list<string>)
                 name: Application Hosts
              app-port:
                 type: consume-signal(int)
                 name: Application port
            haproxy: # Signals which send/receive to Load Balancer submodule
              add-servers:
                 type: send-command(list<string> app-hosts, int app-port, string lb-bucket => string entry-url)
              reconfigure-servers:
                 type: send-command(list<string> app-hosts, int app-port, string lb-bucket)
              lb-stats:
                 type: consume-signal(object)
            result: # Signals which we publish on App dashboard
              entry-url:
                 type: publish-signal(string)
                 name: Broadleaf DemoSite
              entry-admin-url:
                 type: publish-signal(string)
                 name: Broadleaf Admin Panel

          required: [mysql, tomcat, haproxy , solr-zoo] # We don't continue without signals on required interfaces. In this case we are waiting tomcat, mysql and solr+zookeeper hosts return values
           # Static constants #
          configuration:  
            input.db-user: broadleaf
            input.db-password: broadleaf #const
            input.privileges: ["all"] #const
            input.db-sql-url: ["https://raw.github.com/qubell-bazaar/DemoSite/solr-cloud/core/src/main/resources/sql/schema.sql", "https://raw.github.com/qubell-bazaar/DemoSite/solr-cloud/core/src/main/resources/sql/load_full.sql"]
            input.scm-provider: git #const
            input.lib-uri: ["http://repo1.maven.org/maven2/org/apache/tomcat/dbcp/6.0.26/dbcp-6.0.26.jar", "http://repo1.maven.org/maven2/mysql/mysql-connector-java/5.1.6/mysql-connector-java-5.1.6.jar"]
            
            configuration.triggers: # Trigger call corresponded workflow when values changed
              tomcat.app-hosts: app-scale
              input.app-fork: rebuild-app
              input.app-branch: rebuild-app
            configuration.propagateStatus: [ app-scale, rebuild-app ] # Change application state to "Executing" when relevant workflows are running 
            configuration.workflows:
              launch:
                steps:
                  - get-env-props: # After getting signals on all required interfaces we want to used them later
                      action: getEnvironmentProperties
                      phase: get-env-props
                      output:
                        props: result
                  - provision-node: # Here we using trick with provisioning on staticIps for getting App Server ips in tomcat-node role
                       action: provisionVms
                       phase: provisionAgent
                       precedingPhases: [ get-env-props ]
                       parameters:
                         roleName: tomcat-node
                         hardwareId: ""
                         vmIdentity: "{$.operating-system.identity}"
                         retryCount: 1
                         staticIps: "{$.props.tomcat.app-hosts}"
                  - create-db: # Create database or DemoSite. Here we use serviceCall action, this way we can call additional workflows in submodules
                      action: serviceCall
                      phase: create-db
                      precedingPhases: [ get-env-props ]
                      parameters:
                        timeout: 600
                        service: mysql # correseponded to interface mysql in component main.workflow
                        command: db # correseponded to pin mysql.db in component main.workflow
                        arguments:
                          db-name: "{$.db-name}" # send-command parameter
                          db-action: "create"  # send-command parameter
                  - create-db-user: # Create DB user and Grant privileges
                      action: serviceCall
                      phase: create-db-user
                      precedingPhases: [ create-db ]
                      parameters:
                        timeout: 600
                        service: mysql
                        command: user
                        arguments:
                          app-hosts: "{$.props.tomcat.app-hosts}"
                          db-name: "{$.db-name}"
                          db-user: "{$.db-user}"
                          db-user-password: "{$.db-password}"
                          db-user-privileges: "{$.privileges}"
                          user-action: "grant"
                  - run-sql:
                      action: serviceCall
                      precedingPhases: [ create-db-user ]
                      phase: run-sql
                      parameters:
                        timeout: 300
                        service: mysql
                        command: file-query
                        arguments:
                          sql-url: "{$.db-sql-url}"
                          connection:
                             db-name: "{$.db-name}"
                             db-user: "{$.db-user}"
                             db-user-password: "{$.db-password}"
                  - build-app: # Maven build
                      action: serviceCall
                      phase: build-app
                      precedingPhases: [ get-env-props ]
                      parameters:
                        retryCount: 3
                        timeout: 600
                        service: tomcat
                        command: build-app
                        arguments:
                          scm-provider: "{$.scm-provider}"
                          git-uri: "git://github.com/{$.app-fork}/DemoSite.git"
                          app-branch: "{$.app-branch}"
                      output:
                        warlist: result
                  - add-solr-support: # add external Solr support instead embeded
                      action: "chefrun"
                      phase: add-solr-support
                      precedingPhases: [ build-app ]
                      parameters:
                          isSolo: true
                          roles: [ tomcat-node ]
                          runList: [ "recipe[cookbook-qubell-broadleaf::add-solr-support]" ]
                          recipeUrl: "{$.recipe-url}"
                          jattrs:
                            cookbook-qubell-broadleaf:
                              solr_url: "{$.props.solr-zoo.solr-zoo-nodes}"
                              solr_reindex_url: "{$.props.solr-zoo.solr-zoo-nodes}"
                  - deploy-libs: # Deploy libs required for application
                      action: serviceCall
                      phase: deploy-libs
                      precedingPhases: [ build-app ]
                      parameters:
                        timeout: 600
                        service: tomcat
                        command: deploy-libs
                        arguments:
                          lib-uri: "{$.lib-uri}"
                  - reconfigure-tomcat: # Reconfiguring Tomcat with new JAVA_OPTS for Broadleaf DemoSite
                      action: serviceCall
                      phase: reconfigure-tomcat
                      precedingPhases: [ deploy-libs ]
                      parameters:
                        timeout: 600
                        service: tomcat
                        command: reconfigure
                        arguments:
                          java-opts: "-Djava.awt.headless=true -Xms128m -Xmx1024m -XX:PermSize=256m -XX:MaxPermSize=256m -XX:+UseConcMarkSweepGC -Ddatabase.driver=com.mysql.jdbc.Driver -Ddatabase.url=jdbc:mysql://{$.props.mysql.db-host}:{$.props.mysql.db-port}/{$.db-name}?autoReconnect=true -Ddatabase.user={$.db-user} -Ddatabase.password={$.db-password}"
                  - deploy-war: # Deploig DemoSite war and waitng 200
                      action: serviceCall
                      phase: deploy-war
                      precedingPhases: [ build-app, add-solr-support, reconfigure-tomcat ]
                      parameters:
                        timeout: 600
                        service: tomcat
                        command: deploy-war
                        arguments:
                          uri: "{$.warlist.wars[1]}"
                          path: "/"
                          context-attrs: {}
                          context-nodes: []
                  - deploy-admin-war: # Deploing Admin Panel war and waitng 200
                      action: serviceCall
                      phase: deploy-admin-war
                      precedingPhases: [ deploy-war ]
                      parameters:
                        timeout: 800
                        service: tomcat
                        command: deploy-war
                        arguments:
                           uri: "{$.warlist.wars[0]}"
                           path: "/admin"
                           context-attrs: {}
                           context-nodes: []
                  - lb-add-server: # Setup App frontend with Haproxy and add tomcat hosts to backends 
                      action: serviceCall
                      precedingPhases: [ deploy-war, deploy-admin-war ]
                      phase: lb-add-server
                      parameters:
                        timeout: 600
                        service: haproxy
                        command: add-servers
                        arguments:
                          app-hosts: "{$.props.tomcat.app-hosts}"
                          app-port: "{$.props.tomcat.app-port}"
                          lb-bucket: "http://roundrobin:80/"
                      output:
                        result-lb: result
                return: # We want to see DemoSite and AdminPanel urls will be present on application dashboard
                  entry-url:
                    value: "{$.result-lb.entry-url}"
                  entry-admin-url:
                    value: "{$.result-lb.entry-url}/admin"

              app-scale: # Additional worflow for scaling application Nodes
                steps:
                  - get-env-props:
                      action: getEnvironmentProperties
                      phase: get-env-props
                      output:
                        props: result
                  - provision-node:
                       action: provisionVms
                       phase: provisionAgent
                       precedingPhases: [ get-env-props ]
                       parameters:
                         roleName: tomcat-node
                         hardwareId: ""
                         vmIdentity: "{$.operating-system.identity}"
                         retryCount: 1
                         staticIps: "{$.props.tomcat.app-hosts}"
                  - grant-db-user:
                      action: serviceCall
                      phase: create-db-user
                      precedingPhases: [ get-env-props ]
                      parameters:
                        timeout: 600
                        service: mysql
                        command: user
                        arguments:
                          app-hosts: "{$.props.tomcat.app-hosts}"
                          db-name: "{$.db-name}"
                          db-user: "{$.db-user}"
                          db-user-password: "{$.db-password}"
                          db-user-privileges: "{$.privileges}"
                          user-action: "grant"
                  - build-app:
                      action: serviceCall
                      phase: build-app
                      precedingPhases: [ get-env-props ]
                      parameters:
                        retryCount: 3
                        timeout: 1000
                        service: tomcat
                        command: build-app
                        arguments:
                          scm-provider: "{$.scm-provider}"
                          git-uri: "git://github.com/{$.app-fork}/DemoSite.git"
                          app-branch: "{$.app-branch}"
                      output:
                        warlist: result
                  - add-solr-support:
                      action: "chefrun"
                      phase: add-solr-support
                      precedingPhases: [ build-app ]
                      parameters:
                          isSolo: true
                          roles: [ tomcat-node ]
                          runList: [ "recipe[cookbook-qubell-broadleaf::add-solr-support]" ]
                          recipeUrl: "{$.recipe-url}"
                          jattrs:
                            cookbook-qubell-broadleaf:
                              solr_url: "{$.props.solr-zoo.solr-zoo-nodes}"
                              solr_reindex_url: "{$.props.solr-zoo.solr-zoo-nodes}"
                  - deploy-libs:
                      action: serviceCall
                      phase: deploy-libs
                      precedingPhases: [ build-app ]
                      parameters:
                        timeout: 800
                        service: tomcat
                        command: deploy-libs
                        arguments:
                          lib-uri: "{$.lib-uri}"
                  - reconfigure-tomcat:
                      action: serviceCall
                      phase: reconfigure-tomcat
                      precedingPhases: [ deploy-libs, add-solr-support ]
                      parameters:
                        timeout: 800
                        service: tomcat
                        command: reconfigure
                        arguments:
                          java-opts: "-Djava.awt.headless=true -Xms128m -Xmx1024m -XX:PermSize=256m -XX:MaxPermSize=256m -XX:+UseConcMarkSweepGC -Ddatabase.driver=com.mysql.jdbc.Driver -Ddatabase.url=jdbc:mysql://{$.props.mysql.db-host}:{$.props.mysql.db-port}/{$.db-name}?autoReconnect=true -Ddatabase.user={$.db-user} -Ddatabase.password={$.db-password}"
                  - await 360seconds:
                      action: wait
                      description: Sample step that waits for 6 minute.
                      phase: wait-after-reconfigure
                      precedingPhases: [reconfigure-tomcat]
                      parameters:
                        delay: 360 
                  - deploy-war:
                      action: serviceCall
                      phase: deploy-war
                      precedingPhases: [ build-app, wait-after-reconfigure ]
                      parameters:
                        timeout: 600
                        service: tomcat
                        command: deploy-war
                        arguments:
                          uri: "{$.warlist.wars[1]}"
                          path: "/"
                          context-attrs: {}
                          context-nodes: []
                  - deploy-admin-war:
                      action: serviceCall
                      phase: deploy-admin-war
                      precedingPhases: [ deploy-war ]
                      parameters:
                        timeout: 800
                        service: tomcat
                        command: deploy-war
                        arguments:
                           uri: "{$.warlist.wars[0]}"
                           path: "/admin"
                           context-attrs: {}
                           context-nodes: []
                  - lb-reconfigure-servers:
                      action: serviceCall
                      precedingPhases: [ deploy-admin-war ]
                      phase: lb-reconfigure-servers
                      parameters:
                        timeout: 800
                        service: haproxy
                        command: reconfigure-servers
                        arguments:
                          app-hosts: "{$.props.tomcat.app-hosts}"
                          app-port: "{$.props.tomcat.app-port}"
                          lb-bucket: "http://roundrobin:80/"
              rebuild-app: # Additional workflow for rebuilding artifacts in case changing git fork or branch
                steps:
                  - get-env-props:
                      action: getEnvironmentProperties
                      phase: get-env-props
                      output:
                        props: result
                  - provision-node:
                       action: provisionVms
                       phase: provisionAgent
                       precedingPhases: [ get-env-props ]
                       parameters:
                         roleName: tomcat-node
                         hardwareId: ""
                         vmIdentity: "{$.operating-system.identity}"
                         retryCount: 1
                         staticIps: "{$.props.tomcat.app-hosts}"
                  - build-app:
                      action: serviceCall
                      phase: build-app
                      precedingPhases: [ get-env-props ]
                      parameters:
                        retryCount: 3
                        timeout: 800
                        service: tomcat
                        command: build-app
                        arguments:
                          scm-provider: "{$.scm-provider}"
                          git-uri: "git://github.com/{$.app-fork}/DemoSite.git"
                          app-branch: "{$.app-branch}"
                      output:
                        warlist: result
                  - add-solr-support:
                      action: "chefrun"
                      phase: add-solr-support
                      precedingPhases: [ build-app ]
                      parameters:
                          isSolo: true
                          roles: [ tomcat-node ]
                          runList: [ "recipe[cookbook-qubell-broadleaf::add-solr-support]" ]
                          recipeUrl: "{$.recipe-url}"
                          jattrs:
                            cookbook-qubell-broadleaf:
                              solr_url: "{$.props.solr-zoo.solr-zoo-nodes}"
                              solr_reindex_url: "{$.props.solr-zoo.solr-zoo-nodes}"
                  - deploy-war:
                      action: serviceCall
                      phase: deploy-war
                      precedingPhases: [ add-solr-support ]
                      parameters:
                        timeout: 600
                        service: tomcat
                        command: deploy-war
                        arguments:
                          uri: "{$.warlist.wars[1]}"
                          path: "/"
                          context-attrs: {}
                          context-nodes: []
                  - deploy-admin-war:
                      action: serviceCall
                      phase: deploy-admin-war
                      precedingPhases: [ deploy-war ]
                      parameters:
                        timeout: 800
                        service: tomcat
                        command: deploy-war
                        arguments:
                           uri: "{$.warlist.wars[0]}"
                           path: "/admin"
                           context-attrs: {}
                           context-nodes: []
              destroy:
                steps: []
#Submodules Definition
    db:
      type: reference.Submodule
      configuration:
        __locator.application-id: "Database"
      interfaces:
        input:
          db-port:
             type: configuration(int)
             name: Database listen port
          db-root-password:
             type: configuration(string)
             name: Database root password
          instance-size:
             type: configuration(string)
             name: EC2 instance type
          recipe-url: configuration(string)
        mysql:
          schema:
             type: receive-command(string db-user, string db-user-password, list<string> db-user-privileges => object connection)
             name: Manage Schema
          db:
             type: receive-command(string db-name, string db-action)
             name: Database Management
          user:
             type: receive-command(list<string> app-hosts, string db-name, string db-user, string db-user-password, list<string> db-user-privileges, string user-action)
             name: User Management
          file-query:
             type: receive-command(object connection, list<string> sql-url)
             name: Run Sql Query
          dbms:
             type: publish-signal(object)
             name: Database Parameters
          db-port:
             type: publish-signal(int)
             name: Database listen port
          db-host:
             type: publish-signal(string)
             name: Database Host

    app:
      type: reference.Submodule
      configuration:
        __locator.application-id: "Application Server"
      interfaces:
        input:
          operating-system:
              type: configuration(map<string,object>)
              suggestions:
                  "centos": {image: "us-east-1/ami-bf5021d6", identity: root}
                  "amazon": {image: "us-east-1/ami-1ba18d72", identity: ec2-user}
                  "ubuntu1204": {image: "us-east-1/ami-967edcff", identity: ubuntu}
                  "ubuntu1004": {image: "us-east-1/ami-9f3906f6", identity: ubuntu}
          instance-size:
              type: configuration(string)
              name: EC2 instance type
          quantity:
              type: configuration(int)
              name: Appliction hosts quantity
        tomcat:
          build-app:
              type: receive-command(string scm-provider, string git-uri, string app-branch => list<string> wars)
              name: Maven Build
          deploy-libs:
              type: receive-command(list<string> lib-uri)
              name: Deploy Libs
          deploy-war:
              type: receive-command(string uri, string path, object context-attrs, object context-nodes)
              name: Deploy war/jar
          reconfigure:
              type: receive-command(string java-opts)
              name: Reconfigure Tomcat
          manage-service:
              type: receive-command(string service-action)
              name: Manage Service
          app-hosts:
              type: publish-signal(list<string>)
              name: Broadleaf Application Hosts
          app-port:
              type: publish-signal(int)
              name: Appliction listen port

    lb:
      type: reference.Submodule
      configuration:
        __locator.application-id: "Load Balancer"
      interfaces:
        haproxy:
          add-servers:
              type: receive-command(list<string> app-hosts, int app-port, string lb-bucket => string entry-url)
              name: Add Servers
          reconfigure-servers:
              type: receive-command(list<string> app-hosts, int app-port, string lb-bucket)
              name: Reconfigure Servers
          lb-stats:
              type: publish-signal(object)
              name: Haproxy statistics

    solr:
      type: reference.Submodule
      configuration:
         __locator.application-id: "Solr Cloud"
      interfaces:
        input:
          solr-version:
              type: configuration(string)
              name: Solr version
          solr-collections:
              type: configuration(list<string>)
              name: Solr collections
        solr-zoo:
          solr-zoo-nodes:
              type: publish-signal(string)
              name: Zoo hosts Private IPs
          zoo-ui:
              type: publish-signal(list<string>)
              name: Exhibitiors UI Urls
          solr-url:
              type: publish-signal(list<string>)
              name: Solr Urls
